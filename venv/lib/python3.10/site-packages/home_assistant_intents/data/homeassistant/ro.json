{
  "language": "ro",
  "intents": {
    "HassTurnOff": {
      "data": [
        {
          "sentences": [
            "<opreste> (<ventilatorul> | [toate] <ventilatoarele>) [<din>] <area>",
            "<opreste> [<din>] <area> (<ventilatorul> | [toate] <ventilatoarele>)"
          ],
          "slots": {
            "domain": "fan"
          },
          "response": "fans_area"
        },
        {
          "sentences": [
            "<opreste> (<ventilatorul> | [toate] <ventilatoarele>)"
          ],
          "slots": {
            "domain": "fan"
          },
          "requires_context": {
            "area": null
          },
          "response": "fans_area"
        },
        {
          "sentences": [
            "<opreste> <name>"
          ],
          "excludes_context": {
            "domain": [
              "light",
              "cover",
              "scene",
              "script",
              "sensor"
            ]
          }
        },
        {
          "sentences": [
            "<opreste> <name>"
          ],
          "slots": {
            "domain": "light"
          },
          "requires_context": {
            "domain": "light"
          },
          "response": "light"
        },
        {
          "sentences": [
            "<opreste> (<lumina> | [toate] <luminile>) [<din>] <area>",
            "<opreste> [<din>] <area> (<lumina> | [toate] <luminile>)"
          ],
          "slots": {
            "domain": "light"
          },
          "response": "lights_area"
        },
        {
          "sentences": [
            "<opreste> (<lumina> | [toate] <luminile>)"
          ],
          "slots": {
            "domain": "light"
          },
          "requires_context": {
            "area": null
          },
          "response": "lights_area"
        },
        {
          "sentences": [
            "<inchide> <name> [[<din>] <area>]"
          ],
          "requires_context": {
            "domain": "cover"
          },
          "response": "cover"
        },
        {
          "sentences": [
            "<inchide> ({cover_classes_singular:device_class} | [toate] {cover_classes_plural:device_class}) [<din>] <area>"
          ],
          "slots": {
            "domain": "cover"
          },
          "response": "covers_area"
        }
      ]
    },
    "HassTurnOn": {
      "data": [
        {
          "sentences": [
            "<porneste> [scena] <name>"
          ],
          "requires_context": {
            "domain": "scene"
          },
          "slots": {
            "domain": "scene"
          },
          "response": "scene"
        },
        {
          "sentences": [
            "<porneste> <name>"
          ],
          "slots": {
            "domain": "light"
          },
          "requires_context": {
            "domain": "light"
          },
          "response": "light"
        },
        {
          "sentences": [
            "<porneste> (<lumina> | [toate] <luminile>) [<din>] <area>",
            "<porneste> [<din>] <area> (<lumina> | [toate] <luminile>)"
          ],
          "slots": {
            "domain": "light"
          },
          "response": "lights_area"
        },
        {
          "sentences": [
            "<porneste> (<lumina> | [toate] <luminile>)"
          ],
          "slots": {
            "domain": "light"
          },
          "requires_context": {
            "area": null
          },
          "response": "lights_area"
        },
        {
          "sentences": [
            "<deschide> <name> [[<din>] <area>]"
          ],
          "requires_context": {
            "domain": "cover"
          },
          "response": "cover"
        },
        {
          "sentences": [
            "<deschide> ({cover_classes_singular:device_class} | [toate] {cover_classes_plural:device_class}) [<din>] <area>"
          ],
          "slots": {
            "domain": "cover"
          },
          "response": "covers_area"
        },
        {
          "sentences": [
            "<porneste> (<ventilatorul> | [toate] <ventilatoarele>) <din> <area>",
            "<porneste> <din> <area> (<ventilatorul> | [toate] <ventilatoarele>)"
          ],
          "slots": {
            "domain": "fan"
          },
          "response": "fans_area"
        },
        {
          "sentences": [
            "<porneste> (<ventilatorul> | [toate] <ventilatoarele>)"
          ],
          "slots": {
            "domain": "fan"
          },
          "requires_context": {
            "area": null
          },
          "response": "fans_area"
        },
        {
          "sentences": [
            "<ruleaza> [script[ul]] <name>"
          ],
          "requires_context": {
            "domain": "script"
          },
          "slots": {
            "domain": "script"
          },
          "response": "script"
        },
        {
          "sentences": [
            "<porneste> <name>"
          ],
          "excludes_context": {
            "domain": [
              "light",
              "cover",
              "scene",
              "script",
              "sensor"
            ]
          }
        }
      ]
    },
    "HassGetState": {
      "data": [
        {
          "sentences": [
            "[bateria [<din>]] <name> [<din> <area>] e[ste] {bs_battery_states_singular:state}",
            "e[ste] {bs_battery_states_singular:state} [bateria [<din>]] <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "battery"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery"
          }
        },
        {
          "sentences": [
            "[bateria [<din>]] <name> [<din> <area>] e[ste] {bs_battery_charging_states:state}",
            "e[ste] {bs_battery_charging_states:state} [bateria [<din>]] <name> [<din> <area>]",
            "{bs_battery_charging_states_passive:state} [bateria [<din>]] <name> [<din> <area>]",
            "[bateria [<din>]] <name> [<din> <area>] {bs_battery_charging_states_passive:state}"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "battery_charging"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "battery_charging"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_detection_states_singular:state} monoxid[ul] de carbon [(<in> | de [c(ă|a)tre])] <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_detection_states_active:state} monoxid[ul] de carbon",
            "{bs_detection_states_active:state} <name> [<din> <area>] monoxid[ul] de carbon",
            "<name> {bs_detection_states_active:state} monoxid[ul] de carbon [<din> <area>]",
            "{bs_detection_states_active:state} <name> monoxid[ul] de carbon [<din> <area>]",
            "{bs_detection_states_active:state} monoxid[ul] de carbon <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "carbon_monoxide"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "carbon_monoxide"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_cold_states:state} [<din>] <name> [<din> <area>]",
            "e[ste] {bs_cold_states_singular:state} [<din>] <name> [<din> <area>]",
            "<name> [<din> <area>] e[ste] {bs_cold_states_singular:state}",
            "sunt {bs_cold_states_plural:state} [<din>] <name> [<din> <area>]",
            "<name> [<din> <area>] sunt {bs_cold_states_plural:state}"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "cold"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "cold"
          }
        },
        {
          "sentences": [
            "(s-a[u] r(ă|a)cit | a[u] (î|i)nghe(ț|t)at) <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "cold"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "cold",
            "state": "on"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_connectivity_states_singular:state} <name> [<din> <area>]",
            "<name> [<din> <area>] e[ste] {bs_connectivity_states_singular:state}",
            "sunt {bs_connectivity_states_plural:state} <name> [<din> <area>]",
            "<name> [<din> <area>] sunt {bs_connectivity_states_plural:state}"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "connectivity"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "connectivity"
          }
        },
        {
          "sentences": [
            "are conexiune <name> [<din> <area>]",
            "<name> [<din> <area>] are conexiune"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "connectivity"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "connectivity",
            "state": "on"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_door_states_singular:state} <name> [<din> <area>]",
            "<name> [<din> <area>] e[ste] {bs_door_states_singular:state}",
            "sunt {bs_door_states_plural:state} <name> [<din> <area>]",
            "<name> [<din> <area>] sunt {bs_door_states_plural:state}",
            "{bs_door_states_passive:state} <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_door_states_passive:state}",
            "{bs_door_states_active:state} <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_door_states_active:state}"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": [
              "door",
              "garage_door",
              "opening",
              "window"
            ]
          },
          "slots": {
            "domain": "binary_sensor"
          }
        },
        {
          "sentences": [
            "(e[ste] {bs_detection_states_singular:state} gaz | sunt {bs_detection_states_plural:state} gaze) [(<in> | de [c(ă|a)tre])] <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_detection_states_active:state} gaz[e]",
            "{bs_detection_states_active:state} <name> [<din> <area>] gaz[e]",
            "<name> {bs_detection_states_active:state} gaz[e] [<din> <area>]",
            "{bs_detection_states_active:state} gaz[e] <name> [<din> <area>]",
            "{bs_detection_states_active:state} <name> gaz[e] [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "gas"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "gas"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_heat_states:state} [<din>] <name> [<din> <area>]",
            "e[ste] {bs_heat_states_singular:state} [<din>] <name> [<din> <area>]",
            "<name> [<din> <area>] e[ste] {bs_heat_states_singular:state}",
            "sunt {bs_heat_states_plural:state} [<din>] <name> [<din> <area>]",
            "<name> [<din> <area>] sunt {bs_heat_states_plural:state}"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "heat"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "heat"
          }
        },
        {
          "sentences": [
            "s-a[u] ((î|i)nc(ă|a)lzit | (î|i)ncins) <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "heat"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "heat",
            "state": "on"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_detection_states_singular:state} lumin(ă|a) [(<in> | de [c(ă|a)tre])] <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_detection_states_active:state} lumin(ă|a)",
            "{bs_detection_states_active:state} <name> [<din> <area>] lumin(ă|a)",
            "<name> {bs_detection_states_active:state} lumin(ă|a) [<din> <area>]",
            "{bs_detection_states_active:state} <name> lumin(ă|a) [<din> <area>]",
            "{bs_detection_states_active:state} lumin(ă|a) <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "light"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "light"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_lock_states_singular:state} <name> [<din> <area>]",
            "<name> [<din> <area>] e[ste] {bs_lock_states_singular:state}",
            "sunt {bs_lock_states_plural:state} <name> [<din> <area>]",
            "<name> [<din> <area>] sunt {bs_lock_states_plural:state}",
            "{bs_lock_states_passive:state} <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_lock_states_passive:state}",
            "{bs_lock_states_active:state} <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_lock_states_active:state}"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "lock"
          },
          "slots": {
            "domain": "binary_sensor"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_moisture_states:state} <name> [<din> <area>]",
            "<name> [<din> <area>] e[ste] {bs_moisture_states:state}"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "moisture"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "moisture"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_detection_states_singular:state} mi(ș|s)care [(<in> | de [c(ă|a)tre])] <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_detection_states_active:state} mi(ș|s)care",
            "{bs_detection_states_active:state} <name> [<din> <area>] mi(ș|s)care",
            "<name> {bs_detection_states_active:state} mi(ș|s)care [<din> <area>]",
            "{bs_detection_states_active:state} <name> mi(ș|s)care [<din> <area>]",
            "{bs_detection_states_active:state} mi(ș|s)care <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "motion"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "motion"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_detection_states_singular:state} ocupare [(<in> | de [c(ă|a)tre])] <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_detection_states_active:state} ocupare",
            "{bs_detection_states_active:state} <name> [<din> <area>] ocupare",
            "<name> {bs_detection_states_active:state} ocupare [<din> <area>]",
            "{bs_detection_states_active:state} <name> ocupare [<din> <area>]",
            "{bs_detection_states_active:state} ocupare <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "occupancy"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "occupancy"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_plug_states_singular:state} <name> [<din> <area>]",
            "<name> [<din> <area>] e[ste] {bs_plug_states_singular:state}",
            "sunt {bs_plug_states_plural:state} <name> [<din> <area>]",
            "<name> [<din> <area>] sunt {bs_plug_states_plural:state}"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "plug"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "plug"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_power_states_singular:state} <name> [<din> <area>]",
            "<name> [<din> <area>] e[ste] {bs_power_states_singular:state}",
            "sunt {bs_power_states_plural:state} <name> [<din> <area>]",
            "<name> [<din> <area>] sunt {bs_power_states_plural:state}"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "power"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "power"
          }
        },
        {
          "sentences": [
            "<name> [<din> <area>] e[ste] {bs_presence_states:state}",
            "e[ste] {bs_presence_states:state} <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "presence"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "presence"
          }
        },
        {
          "sentences": [
            "(sunt probleme | (e[ste] | exist(ă|a)) [[vre]o] problem(ă|a)) [<detectat>] ([<in> leg(ă|a)tur(ă|a)] cu | la) <name> [<din> <area>]",
            "are (probleme | vreo problema) <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "problem"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "problem",
            "state": "on"
          }
        },
        {
          "sentences": [
            "<name> [<din> <area>] e[ste] {bs_running_states:state}",
            "e[ste] {bs_running_states:state} <name> [<din> <area>]",
            "{bs_running_states_active:state} <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_running_states_active:state}"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "running"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "running"
          }
        },
        {
          "sentences": [
            "<name> [<din> <area>] e[ste] {bs_safety_states:state}",
            "e[ste] {bs_safety_states:state} <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "safety"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "safety"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_detection_states_singular:state} fum[ul] [(<in> | de [c(ă|a)tre])] <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_detection_states_active:state} fum[ul]",
            "{bs_detection_states_active:state} <name> [<din> <area>] fum[ul]",
            "<name> {bs_detection_states_active:state} fum[ul] [<din> <area>]",
            "{bs_detection_states_active:state} <name> fum[ul] [<din> <area>]",
            "{bs_detection_states_active:state} fum[ul] <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "smoke"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "smoke"
          }
        },
        {
          "sentences": [
            "e[ste] [<detectat>] [vreun pic de] fum[ul] <in> <area>"
          ],
          "response": "any",
          "slots": {
            "domain": "binary_sensor",
            "device_class": "smoke",
            "state": "on"
          }
        },
        {
          "sentences": [
            "e[ste] {bs_detection_states_singular:state} (zgomot|sunet)[(ul|e)] [(<in> | de [c(ă|a)tre])] <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_detection_states_active:state} (zgomot|sunet)[(ul|e)]",
            "{bs_detection_states_active:state} <name> [<din> <area>] (zgomot|sunet)[(ul|e)]",
            "<name> {bs_detection_states_active:state} (zgomot|sunet)[(ul|e)] [<din> <area>]",
            "{bs_detection_states_active:state} <name> (zgomot|sunet)[(ul|e)] [<din> <area>]",
            "{bs_detection_states_active:state} (zgomot|sunet)[(ul|e)] <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "sound"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "sound"
          }
        },
        {
          "sentences": [
            "<name> [<din> <area>] (e[ste] | a fost) {bs_tamper_states:state}",
            "(e[ste] | a fost) {bs_tamper_states:state} <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "tamper"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "tamper"
          }
        },
        {
          "sentences": [
            "(e[ste] | exist(ă|a)) [<vreun>] update [disponibil] (pentru | la) <name> [<din> <area>]",
            "sunt update[[-]uri] [disponibile] (pentru | la) <name> [<din> <area>]",
            "<name> [<din> <area>] are ([<vreun>] update [disponibil] | update[-]uri [disponibile])"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "update"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "update",
            "state": "on"
          }
        },
        {
          "sentences": [
            "e[ste] (actualizat | la zi) <name> [<din> <area>]",
            "<name> [<din> <area>] este (actualizat | la zi)"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "update"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "update",
            "state": "off"
          }
        },
        {
          "sentences": [
            "sunt {bs_detection_states_plural:state} vibra(ț|t)ii [(<in> | de [c(ă|a)tre])] <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_detection_states_active:state} vibra(ț|t)ii",
            "{bs_detection_states_active:state} <name> [<din> <area>] vibra(ț|t)ii",
            "<name> {bs_detection_states_active:state} vibra(ț|t)ii [<din> <area>]",
            "{bs_detection_states_active:state} <name> vibra(ț|t)ii [<din> <area>]",
            "{bs_detection_states_active:state} vibra(ț|t)ii <name> [<din> <area>]",
            "{bs_vibration_states_active:state} <name> [<din> <area>]",
            "<name> [<din> <area>] {bs_vibration_states_active:state}"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "binary_sensor",
            "device_class": "vibration"
          },
          "slots": {
            "domain": "binary_sensor",
            "device_class": "vibration"
          }
        },
        {
          "sentences": [
            "<cat> e[ste] <name> [<din> <area>]",
            "(ce stare are|(î|i)n ce stare e[ste]) <name> [<din> <area>]"
          ],
          "response": "one",
          "excludes_context": {
            "domain": [
              "scene",
              "script"
            ]
          }
        },
        {
          "sentences": [
            "<name> [<din> <area>] e[ste] {on_off_states_singular:state}",
            "e[ste] {on_off_states_singular:state} <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "excludes_context": {
            "domain": [
              "cover",
              "binary_sensor"
            ]
          }
        },
        {
          "sentences": [
            "(e[ste] | exist(ă|a)) [<vreun>] {on_off_domains_singular:domain} {on_off_states_singular:state} [<in> <area>]",
            "(sunt | exist(ă|a)) {on_off_domains_plural:domain} {on_off_states_plural:state} [<in> <area>]"
          ],
          "response": "any"
        },
        {
          "sentences": [
            "sunt toate {on_off_domains_plural:domain} {on_off_states_plural:state} [<in> <area>]",
            "sunt {on_off_states_plural:state} toate {on_off_domains_plural:domain} [<in> <area>]",
            "toate {on_off_domains_plural:domain} sunt {on_off_states_plural:state} [<in> <area>]"
          ],
          "response": "all"
        },
        {
          "sentences": [
            "<care> {on_off_domains_singular:domain} e[ste] {on_off_states_singular:state} [<in> <area>]",
            "<care> {on_off_domains_plural:domain} sunt {on_off_states_plural:state} [<in> <area>]"
          ],
          "response": "which"
        },
        {
          "sentences": [
            "<cate> {on_off_domains_plural:domain} sunt {on_off_states_plural:state} [<in> <area>]"
          ],
          "response": "how_many"
        },
        {
          "sentences": [
            "<name> [<din> <area>] e[ste] {cover_states_singular:state}",
            "e[ste] {cover_states_singular:state} <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "(e[ste] | exist(ă|a)) [<vreun>] {cover_classes_singular:device_class} {cover_states_singular:state} [<in> <area>]",
            "(sunt | exist(ă|a)) {cover_classes_plural:device_class} {cover_states_plural:state} [<in> <area>]"
          ],
          "response": "any",
          "requires_context": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "sunt toate {cover_classes_plural:device_class} {cover_states_plural:state} [<in> <area>]",
            "toate {cover_classes_plural:device_class} sunt {cover_states_plural:state} [<in> <area>]"
          ],
          "response": "all",
          "requires_context": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "<care> {cover_classes_singular:device_class} e[ste] {cover_states_singular:state} [<in> <area>]",
            "<care> {cover_classes_plural:device_class} sunt {cover_states_plural:state} [<in> <area>]"
          ],
          "response": "which",
          "requires_context": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "<cate> {cover_classes_plural:device_class} sunt {cover_states_plural:state} [<in> <area>]"
          ],
          "response": "how_many",
          "requires_context": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "<name> [<din> <area>] e[ste] {on_off_states_singular:state}",
            "e[ste] {on_off_states_singular:state} <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "light"
          }
        },
        {
          "sentences": [
            "(e[ste] | exist(ă|a)) [<vreun>] <lumina> {on_off_states_singular:state} [<in> <area>]",
            "(sunt | exist(ă|a)) <luminile> {on_off_states_plural:state} [<in> <area>]"
          ],
          "response": "any",
          "requires_context": {
            "domain": "light"
          }
        },
        {
          "sentences": [
            "sunt toate <luminile> {on_off_states_plural:state} [<in> <area>]",
            "toate <luminile> sunt {on_off_states_plural:state} [<in> <area>]"
          ],
          "response": "all",
          "requires_context": {
            "domain": "light"
          }
        },
        {
          "sentences": [
            "<care> <lumina> e[ste] {on_off_states_singular:state} [<in> <area>]",
            "<care> <luminile> sunt {on_off_states_plural:state} [<in> <area>]"
          ],
          "response": "which",
          "requires_context": {
            "domain": "light"
          }
        },
        {
          "sentences": [
            "<cate> <luminile> sunt {on_off_states_plural:state} [<in> <area>]"
          ],
          "response": "how_many",
          "requires_context": {
            "domain": "light"
          }
        },
        {
          "sentences": [
            "<name> [<din> <area>] e[ste] {lock_states_singular:state}",
            "e[ste] {lock_states_singular:state} <name> [<din> <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "lock"
          },
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "(e[ste] | exist(ă|a)) [<vreun>] <usa> {lock_states_singular:state} [<in> <area>]",
            "(sunt | exist(ă|a)) <usile> {lock_states_plural:state} [<in> <area>]"
          ],
          "response": "any",
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "sunt toate <usile> {lock_states_plural:state} [<in> <area>]",
            "toate <usile> sunt {lock_states_plural:state} [<in> <area>]"
          ],
          "response": "all",
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "<care> <usa> e[ste] {lock_states_singular:state} [<in> <area>]",
            "<care> <usile> sunt {lock_states_plural:state} [<in> <area>]"
          ],
          "response": "which",
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "<cate> <usile> sunt {lock_states_plural:state} [<in> <area>]"
          ],
          "response": "how_many",
          "slots": {
            "domain": "lock"
          }
        }
      ]
    }
  },
  "responses": {
    "errors": {
      "no_intent": "Îmi pare rău, nu am înțeles cererea. Poți, te rog, să repeți?",
      "no_area": "Îmi pare rău, nu este nici o zonă numită {{ area }}",
      "no_domain": "Îmi pare rău, în {{ area }} nu este {{ domain }}",
      "no_device_class": "Îmi pare rău, zona {{ area }} nu conține {{ device_class }}",
      "no_entity": "Îmi pare rău, nu am găsit niciun dispozitiv sau entitate cu numele {{ entity }}",
      "handle_error": "Îmi pare rău, a intervenit o eroare în timpul procesării cererii"
    },
    "intents": {
      "HassGetState": {
        "one": "{{ slots.name | capitalize }} este {{ state.state_with_unit }}",
        "one_yesno": "{% if query.matched: %}\nDa\n{% else: %}\nNu, ci {{ state.state_with_unit }}\n{% endif %}\n",
        "any": "{% if query.matched %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    Da, {{ match[:3] | join(\", \") }} și încă {{ (match | length - 3) }}\n  {%- else -%}\n    Da,\n    {% for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} și {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% else %}\n  Nu\n{% endif %}\n",
        "all": "{% if not query.unmatched: %}\n  Da\n{% else %}\n  {% set no_match = query.unmatched | map(attribute=\"name\") | sort | list %}\n  {% if no_match | length > 4 %}\n    Nu, {{ no_match[:3] | join(\", \") }} și încă {{ (no_match | length - 3) }} nu sunt {{ slots.state }}\n  {%- else -%}\n    Nu,\n    {% for name in no_match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} și {% endif -%}\n      {{ name }}\n    {%- endfor %} nu {{ 'este' if (query.unmatched|length) == 1 else 'sunt' }}\n  {% endif %}\n{% endif %}\n",
        "which": "{% if not query.matched %}\n  Nu există niciun astfel de element\n{% else: %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    {{ match[:3] | join(\", \") }} și încă {{ (match | length - 3) }}\n  {% else %}\n    {%- for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} și {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% endif %}\n",
        "how_many": "{{ query.matched | length }}\n"
      },
      "HassTurnOff": {
        "default": "Am oprit {{ slots.name }}",
        "light": "Am stins lumina",
        "lights_area": "Am stins luminile",
        "fans_area": "Am oprit ventilatoarele",
        "cover": "Am închis",
        "covers_area": "Am închis {{ slots.device_class }}"
      },
      "HassTurnOn": {
        "default": "Am pornit {{ slots.name }}",
        "light": "Am aprins lumina",
        "lights_area": "Am aprins luminile",
        "fans_area": "Am pornit ventilatoarele",
        "cover": "Am deschis",
        "covers_area": "Am deschis {{ slots.device_class }}",
        "scene": "Am activat",
        "script": "Am pornit"
      }
    }
  },
  "lists": {
    "color": {
      "values": [
        {
          "in": "alb",
          "out": "white"
        },
        {
          "in": "negru",
          "out": "black"
        },
        {
          "in": "ro(ș|s)u",
          "out": "red"
        },
        {
          "in": "(portocaliu | oranj)",
          "out": "orange"
        },
        {
          "in": "galben",
          "out": "yellow"
        },
        {
          "in": "verde",
          "out": "green"
        },
        {
          "in": "(albastru | bleu)",
          "out": "blue"
        },
        {
          "in": "(lila | violet | purpuriu | mov)",
          "out": "purple"
        },
        {
          "in": "maro",
          "out": "brown"
        }
      ]
    },
    "brightness": {
      "range": {
        "type": "percentage",
        "from": 0,
        "to": 100
      }
    },
    "brightness_min_max": {
      "values": [
        {
          "in": "<maximum>",
          "out": 100
        },
        {
          "in": "<jumatate>",
          "out": 50
        },
        {
          "in": "<minimum>",
          "out": 1
        }
      ]
    },
    "temperature": {
      "range": {
        "type": "temperature",
        "from": -100,
        "to": 100
      }
    },
    "temperature_unit": {
      "values": [
        "celsius",
        {
          "in": "c",
          "out": "celsius"
        },
        "fahrenheit",
        {
          "in": "f",
          "out": "fahrenheit"
        }
      ]
    },
    "on_off_states_singular": {
      "values": [
        {
          "in": "<pornit>",
          "out": "on"
        },
        {
          "in": "<oprit>",
          "out": "off"
        }
      ]
    },
    "on_off_states_plural": {
      "values": [
        {
          "in": "<pornite>",
          "out": "on"
        },
        {
          "in": "<oprite>",
          "out": "off"
        }
      ]
    },
    "on_off_domains_singular": {
      "values": [
        {
          "in": "<lumina>",
          "out": "light"
        },
        {
          "in": "<ventilatorul>",
          "out": "fan"
        },
        {
          "in": "<intrerupatorul>",
          "out": "switch"
        }
      ]
    },
    "on_off_domains_plural": {
      "values": [
        {
          "in": "<luminile>",
          "out": "light"
        },
        {
          "in": "<ventilatoarele>",
          "out": "fan"
        },
        {
          "in": "<intrerupatoarele>",
          "out": "switch"
        }
      ]
    },
    "cover_states_singular": {
      "values": [
        {
          "in": "<deschis>",
          "out": "open"
        },
        {
          "in": "<inchis>",
          "out": "closed"
        },
        {
          "in": "(î|i)n curs de (deschidere | ridicare)",
          "out": "opening"
        },
        {
          "in": "(î|i)n curs de (inchidere | coborâre)",
          "out": "closing"
        }
      ]
    },
    "cover_states_plural": {
      "values": [
        {
          "in": "<deschise>",
          "out": "open"
        },
        {
          "in": "<inchise>",
          "out": "closed"
        },
        {
          "in": "(î|i)n curs de (deschidere | ridicare)",
          "out": "opening"
        },
        {
          "in": "(î|i)n curs de (inchidere | coborâre)",
          "out": "closing"
        }
      ]
    },
    "cover_classes_singular": {
      "values": [
        {
          "in": "copertin(ă|a)",
          "out": "awning"
        },
        {
          "in": "jaluzea[ua]",
          "out": "blind"
        },
        {
          "in": "perdea[ua]",
          "out": "curtain"
        },
        {
          "in": "<usa>",
          "out": "door"
        },
        {
          "in": "u(ș|s)a (de la garaj | garajului)",
          "out": "garage"
        },
        {
          "in": "<poarta>",
          "out": "gate"
        },
        {
          "in": "draperi(e|a)",
          "out": "shade"
        },
        {
          "in": "(rulou[l] | oblon[ul])",
          "out": "shutter"
        },
        {
          "in": "<fereastra>",
          "out": "window"
        }
      ]
    },
    "cover_classes_plural": {
      "values": [
        {
          "in": "copertine[le]",
          "out": "awning"
        },
        {
          "in": "jaluzele[le]",
          "out": "blind"
        },
        {
          "in": "perdele[le]",
          "out": "curtain"
        },
        {
          "in": "<usile>",
          "out": "door"
        },
        {
          "in": "u(ș|s)ile (de la garaj | garajului)",
          "out": "garage"
        },
        {
          "in": "<portile>",
          "out": "gate"
        },
        {
          "in": "draperii[le]",
          "out": "shade"
        },
        {
          "in": "(rulouri[le] | obloane[le])",
          "out": "shutter"
        },
        {
          "in": "<ferestrele>",
          "out": "window"
        }
      ]
    },
    "lock_states_singular": {
      "values": [
        {
          "in": "<incuiat>",
          "out": "locked"
        },
        {
          "in": "<descuiat>",
          "out": "unlocked"
        }
      ]
    },
    "lock_states_plural": {
      "values": [
        {
          "in": "<incuiate>",
          "out": "locked"
        },
        {
          "in": "<descuiate>",
          "out": "unlocked"
        }
      ]
    },
    "bs_detection_states_singular": {
      "values": [
        {
          "in": "<detectat>",
          "out": "on"
        },
        {
          "in": "<nedetectat>",
          "out": "off"
        }
      ]
    },
    "bs_detection_states_plural": {
      "values": [
        {
          "in": "<detectate>",
          "out": "on"
        },
        {
          "in": "<nedetectate>",
          "out": "off"
        }
      ]
    },
    "bs_detection_states_active": {
      "values": [
        {
          "in": "(detecteaz(ă|a) | simte)",
          "out": "on"
        },
        {
          "in": "a (detectat | sim(ț|t)it)",
          "out": "on"
        },
        {
          "in": "nu (detecteaz(ă|a) | simte)",
          "out": "off"
        },
        {
          "in": "nu a (detectat | sim(ț|t)it)",
          "out": "off"
        }
      ]
    },
    "bs_battery_states_singular": {
      "values": [
        {
          "in": "descarcat(ă|a)",
          "out": "on"
        },
        {
          "in": "(normal(ă|a) | (î|i)nc(ă|a)rcat(ă|a))",
          "out": "off"
        }
      ]
    },
    "bs_battery_charging_states": {
      "values": [
        {
          "in": "(î|i)n curs de (î|i)nc(ă|a)rcare",
          "out": "on"
        },
        {
          "in": "la (î|i)nc(ă|a)rca(re|t)",
          "out": "on"
        },
        {
          "in": "(î|i)n curs de desc(ă|a)rcare",
          "out": "off"
        }
      ]
    },
    "bs_battery_charging_states_passive": {
      "values": [
        {
          "in": "se (î|i)ncarc(ă|a)",
          "out": "on"
        },
        {
          "in": "e[ste] la (î|i)nc(ă|a)rcat",
          "out": "on"
        },
        {
          "in": "se descarc(ă|a)",
          "out": "off"
        }
      ]
    },
    "bs_cold_states": {
      "values": [
        {
          "in": "<frig>",
          "out": "on"
        },
        {
          "in": "normal",
          "out": "off"
        }
      ]
    },
    "bs_cold_states_singular": {
      "values": [
        {
          "in": "(rece | (î|i)nghe(ț|t)at[(ă|a)])",
          "out": "on"
        },
        {
          "in": "normal[(ă|a)]",
          "out": "off"
        }
      ]
    },
    "bs_cold_states_plural": {
      "values": [
        {
          "in": "(reci | (î|i)nghe(ț|t)a((ț|t)i|te))",
          "out": "on"
        },
        {
          "in": "normal(i|e)",
          "out": "off"
        }
      ]
    },
    "bs_connectivity_states_singular": {
      "values": [
        {
          "in": "conectat[(ă|a)]",
          "out": "on"
        },
        {
          "in": "deconectat[(ă|a)]",
          "out": "off"
        }
      ]
    },
    "bs_connectivity_states_plural": {
      "values": [
        {
          "in": "conecta((ț|t)i|te)",
          "out": "on"
        },
        {
          "in": "deconecta((ț|t)i|te)",
          "out": "off"
        }
      ]
    },
    "bs_door_states_singular": {
      "values": [
        {
          "in": "<deschis>",
          "out": "on"
        },
        {
          "in": "<inchis>",
          "out": "off"
        }
      ]
    },
    "bs_door_states_plural": {
      "values": [
        {
          "in": "<deschise>",
          "out": "on"
        },
        {
          "in": "<inchise>",
          "out": "off"
        }
      ]
    },
    "bs_door_states_passive": {
      "values": [
        {
          "in": "s-a[u] deschis",
          "out": "on"
        },
        {
          "in": "s-a[u] (î|i)nchis",
          "out": "off"
        }
      ]
    },
    "bs_door_states_active": {
      "values": [
        {
          "in": "am deschis",
          "out": "on"
        },
        {
          "in": "a deschis cineva",
          "out": "on"
        },
        {
          "in": "am (î|i)nchis",
          "out": "off"
        },
        {
          "in": "a (î|i)nchis cineva",
          "out": "off"
        }
      ]
    },
    "bs_heat_states": {
      "values": [
        {
          "in": "<cald>",
          "out": "on"
        },
        {
          "in": "normal",
          "out": "off"
        }
      ]
    },
    "bs_heat_states_singular": {
      "values": [
        {
          "in": "(cald[(ă|a)] | fierbinte | (î|i)ncins)",
          "out": "on"
        },
        {
          "in": "normal[(ă|a)]",
          "out": "off"
        }
      ]
    },
    "bs_heat_states_plural": {
      "values": [
        {
          "in": "(cal(zi|de) | fierbin(ț|t)i | (î|i)ncin((ș|s)i|se))",
          "out": "on"
        },
        {
          "in": "normal(i|e)",
          "out": "off"
        }
      ]
    },
    "bs_lock_states_singular": {
      "values": [
        {
          "in": "<descuiat>",
          "out": "on"
        },
        {
          "in": "<incuiat>",
          "out": "off"
        }
      ]
    },
    "bs_lock_states_plural": {
      "values": [
        {
          "in": "<descuiate>",
          "out": "on"
        },
        {
          "in": "<incuiate>",
          "out": "off"
        }
      ]
    },
    "bs_lock_states_passive": {
      "values": [
        {
          "in": "s-a[u] descuiat",
          "out": "on"
        },
        {
          "in": "s-a[u] (î|i)ncuiat",
          "out": "off"
        }
      ]
    },
    "bs_lock_states_active": {
      "values": [
        {
          "in": "am descuiat",
          "out": "on"
        },
        {
          "in": "a descuiat cineva",
          "out": "on"
        },
        {
          "in": "am (î|i)ncuiat",
          "out": "off"
        },
        {
          "in": "a (î|i)ncuiat cineva",
          "out": "off"
        }
      ]
    },
    "bs_moisture_states": {
      "values": [
        {
          "in": "u[me]d[(ă|a)]",
          "out": "on"
        },
        {
          "in": "uscat[(ă|a)]",
          "out": "off"
        }
      ]
    },
    "bs_plug_states_singular": {
      "values": [
        {
          "in": "conectat[(ă|a)]",
          "out": "on"
        },
        {
          "in": "deconectat[(ă|a)]",
          "out": "off"
        }
      ]
    },
    "bs_plug_states_plural": {
      "values": [
        {
          "in": "conecta((ț|t)i|te)",
          "out": "on"
        },
        {
          "in": "deconecta((ț|t)i|te)",
          "out": "off"
        }
      ]
    },
    "bs_power_states_singular": {
      "values": [
        {
          "in": "(alimentat[(ă|a)] | sub tensiune | [(b(ă|a)gat[(ă|a)] | introdus[(ă|a)]) ]<in> priz(ă|a))",
          "out": "on"
        },
        {
          "in": "(nealimentat[(ă|a)] | (b(ă|a)gat[(ă|a)] <in> | (scos | scoas(ă|a)) din) priz(ă|a))",
          "out": "off"
        }
      ]
    },
    "bs_power_states_plural": {
      "values": [
        {
          "in": "(alimenta((ț|t)i|te) | sub tensiune | [(b(ă|a)ga((ț|t)i|te) | introdu((ș|s)i|se)) ]<in> priz(ă|a))",
          "out": "on"
        },
        {
          "in": "(nealimentat((ț|t)i|te) | (sco(ș|s)i | scoase) din priz(ă|a))",
          "out": "off"
        }
      ]
    },
    "bs_presence_states": {
      "values": [
        {
          "in": "(acas(ă|a) | prezent[(ă|a)])",
          "out": "on"
        },
        {
          "in": "(plecat[(ă|a)] | absent[(ă|a)])",
          "out": "off"
        }
      ]
    },
    "bs_running_states": {
      "values": [
        {
          "in": "(pornit[(ă|a)] | (î|i)n [curs de] (rulare | desf(ă|a)(ș|s)urare))",
          "out": "on"
        },
        {
          "in": "((î|i)n repaus | oprit[(ă|a)])",
          "out": "off"
        }
      ]
    },
    "bs_running_states_active": {
      "values": [
        {
          "in": "ruleaz(ă|a)",
          "out": "on"
        },
        {
          "in": "s-a oprit",
          "out": "off"
        }
      ]
    },
    "bs_safety_states": {
      "values": [
        {
          "in": "nesigur",
          "out": "on"
        },
        {
          "in": "sigur",
          "out": "off"
        }
      ]
    },
    "bs_tamper_states": {
      "values": [
        {
          "in": "vandalizat",
          "out": "on"
        },
        {
          "in": "(normal | nevandalizat)",
          "out": "off"
        }
      ]
    },
    "bs_vibration_states_active": {
      "values": [
        {
          "in": "vibreaz(ă|a)",
          "out": "on"
        },
        {
          "in": "nu vibreaz(ă|a)",
          "out": "off"
        }
      ]
    }
  },
  "expansion_rules": {
    "area": "[(zona | regiunea | spa(ț|t)iul)] {area}",
    "brightness": "{brightness}[ ][(% | la sut(ă|a) | [de ]procente)]",
    "brightness_percent": "{brightness}[ ](% | la sut(ă|a) | [de] procente)",
    "temperature": "{temperature}[ ][[de ]grad[e]][[ ]{temperature_unit}]",
    "name": "({name})",
    "maximum": "(maxim[(ă|a|um)] [posibil[(ă|a)]])",
    "jumatate": "(jum(ă|a)tate | jumate)",
    "minimum": "(minim[(ă|a|um)] [posibil[(ă|a)]])",
    "este": "(e | este | sunt)",
    "porneste": "(start | porne(ș|s)te | deschide | aprinde | activeaz(ă|a))",
    "opreste": "(stop | opre(ș|s)te | (î|i)nchide | stinge | dezactiveaz(ă|a))",
    "seteaza": "(seteaz(ă|a) | pune | a[d]justeaz(ă|a) | schimb(ă|a) | modific(ă|a))",
    "deschide": "(deschide | ridic(ă|a))",
    "inchide": "((î|i)nchide | coboar(ă|a))",
    "ruleaza": "(ruleaz(ă|a) | start | porne(ș|s)te | activeaz(ă|a))",
    "cate": "(c(â|a)te | c(â|a)(ț|t)i)",
    "cat_quant": "(c(â|a)t)",
    "cat": "(<cat_quant> | cum)",
    "care": "(care | ce)",
    "in": "((î|i)n)",
    "din": "(din | (î|i)n | pentru | [de] la | [de] pe | de)",
    "pornit": "(pornit[(ă|a)] | deschis[(ă|a)]) | aprins[(ă|a)] | activat[(ă|a)]",
    "pornite": "(pornite | deschise | aprinse | activate)",
    "oprit": "(oprit[(ă|a)] | (î|i)nchis[(ă|a)] | stins[(ă|a)] | dezactivat[(ă|a)])",
    "oprite": "(oprite | (î|i)nchise | stinse | dezactivate)",
    "deschis": "(deschis[(ă|a)] | ridicat[(ă|a)])",
    "deschise": "(deschise | ridicate)",
    "inchis": "((î|i)nchis[(ă|a)] | coboar(â|a)t[(ă|a)])",
    "inchise": "((î|i)nchise | coboar(â|a)te)",
    "detectat": "(detectat[(ă|a)] | prezent[(ă|a)] | observabil[(ă|a)])",
    "detectate": "(detecta((ț|t)i|te) | prezen((ț|t)i|te) | observabil(i|e))",
    "nedetectat": "(nedetectat[(ă|a)] | absent[(ă|a)] | neobservabil[(ă|a)] | liber[(ă|a)])",
    "nedetectate": "(nedetecta((ț|t)i|te) | absen((ț|t)i|te) | neobservabil(i|e) | liber(i|e))",
    "descuiat": "descuiat[(ă|a)]",
    "descuiate": "descuia((ț|t)i|te)",
    "incuiat": "(î|i)ncuiat[(ă|a)]",
    "incuiate": "(î|i)ncuia((ț|t)i|te)",
    "cald": "(cald | fierbinte | (î|i)ncins)",
    "frig": "(frig | rece | r(ă|a)coare)",
    "cald_frig": "(<cald> | <frig>)",
    "lumina": "(lumin(ă|a) | bec[ul])",
    "luminile": "(lumini[le] | becuri[le])",
    "ventilatorul": "(ventilator[ul] | aerisire[a])",
    "ventilatoarele": "(ventilatoare[le] | aerisiri[le])",
    "intrerupatorul": "((î|i)ntrerup(ă|a)tor[ul] | comutator[ul])",
    "intrerupatoarele": "((î|i)ntrerup(ă|a)toare[le] | comutatoare[le])",
    "luminozitatea": "(luminozitate[a])",
    "culoarea": "(culoare[a])",
    "temperatura": "(temperatur(ă|a))",
    "fereastra": "(fereastr(ă|a) | geam[ul])",
    "ferestrele": "(ferestre[le] | geamuri[le])",
    "usa": "u(ș|s)(ă|a)",
    "usile": "u(ș|s)i[le]",
    "poarta": "poart(ă|a)",
    "portile": "por(ț|t)i[le]",
    "vreun": "(vre(o|un))"
  },
  "skip_words": [
    "mulțumesc",
    "multumesc",
    "te rog",
    "te rog frumos",
    "merci",
    "mersi"
  ]
}
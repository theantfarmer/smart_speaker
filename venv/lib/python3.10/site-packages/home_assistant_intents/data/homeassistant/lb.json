{
  "language": "lb",
  "intents": {
    "HassTurnOff": {
      "data": [
        {
          "sentences": [
            "schalt <name> aus",
            "schalt <name> <area> aus",
            "stopp <name>",
            "<maach> <area> <name> <zou>",
            "<maach> <name> <area> <zou>"
          ]
        },
        {
          "sentences": [
            "<maach> <area> (<window> | <garage>) <zou>",
            "<maach> (<window> | <garage>) <area> <zou>"
          ],
          "response": "cover_area"
        },
        {
          "sentences": [
            "<maach> [(all | alleguer)] <light> <area> aus",
            "<maach> [(all | alleguer)] <area> <light> aus"
          ],
          "slots": {
            "domain": "light",
            "name": "all"
          },
          "response": "lights_area"
        },
        {
          "sentences": [
            "<maach> <all_window> <zou>"
          ],
          "response": "cover_device_class",
          "slots": {
            "domain": "cover",
            "device_class": [
              "window",
              "blind",
              "curtain",
              "shutter"
            ]
          }
        }
      ]
    },
    "HassGetState": {
      "data": [
        {
          "sentences": [
            "Wat [ass] [de Status vun] <name> [<area>]"
          ],
          "response": "one"
        },
        {
          "sentences": [
            "Ass [de Status vun] <name> {on_off_states:state} [<area>]"
          ],
          "response": "one_yesno",
          "excludes_context": {
            "domain": [
              "cover"
            ]
          }
        },
        {
          "sentences": [
            "(ass|sinn) (iergendeng|iergendeen) {on_off_domains:domain} {on_off_states:state} [<area>]"
          ],
          "response": "any"
        },
        {
          "sentences": [
            "Sinn all [d'] {on_off_domains:domain} {on_off_states:state} [<area>]"
          ],
          "response": "all"
        },
        {
          "sentences": [
            "Wéi eng {on_off_domains:domain} (ass|sinn) {on_off_states:state} [<area>]"
          ],
          "response": "which"
        },
        {
          "sentences": [
            "Wéi vill {on_off_domains:domain} (ass|sinn) {on_off_states:state} [<area>]"
          ],
          "response": "how_many"
        },
        {
          "sentences": [
            "ass [di] <name> {cover_states:state} [<area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "cover"
          },
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "(ass|sinn) (iergendeng|iergendeen) {cover_classes:device_class} {cover_states:state} [<area>]"
          ],
          "response": "any",
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "Sinn all [d']{cover_classes:device_class} {cover_states:state} [<area>]"
          ],
          "response": "all",
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "(wéieen|wéieng) {cover_classes:device_class} (ass|sinn) {cover_states:state} [<area>]"
          ],
          "response": "which",
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "wéi vill {cover_classes:device_class} sinn {cover_states:state} [<area>]"
          ],
          "response": "how_many",
          "slots": {
            "domain": "cover"
          }
        }
      ]
    },
    "HassTurnOn": {
      "data": [
        {
          "sentences": [
            "<maach> [(all | alleguer)] <light> <area> un",
            "<maach> [(all | alleguer)] <area> <light> un"
          ],
          "slots": {
            "domain": "light",
            "name": "all"
          },
          "response": "lights_area"
        },
        {
          "sentences": [
            "<maach> <all_window> <op>"
          ],
          "response": "cover_device_class",
          "slots": {
            "domain": "cover",
            "device_class": [
              "window",
              "blind",
              "curtain",
              "shutter"
            ]
          }
        },
        {
          "sentences": [
            "schalt <name> un",
            "schalt <name> <area> un",
            "aktivéier <name>",
            "<maach> <area> <name> <op>",
            "<maach> <name> <area> <op>"
          ]
        },
        {
          "sentences": [
            "<maach> <area> (<window> | <garage>) <op>",
            "<maach> (<window> | <garage>) <area> <op>"
          ],
          "response": "cover_area"
        }
      ]
    }
  },
  "responses": {
    "errors": {
      "no_intent": "Et deet mer Leed, ech hunn dat net verstanen",
      "no_area": "Et gëtt kee Beräich mam Numm {{ area }}",
      "no_domain": "{{ area }} huet keen {{ domain }}",
      "no_device_class": " {{ area }} huet keen {{ device_class }}",
      "no_entity": "Et gëtt kee Gerät oder Eenheet mam Numm {{ entity }}",
      "handle_error": "Et ass en onerwaarte Feeler opgetratt"
    },
    "intents": {
      "HassGetState": {
        "one": "{{ slots.name | capitalize }} ass {{ state.state_with_unit }}\n",
        "one_yesno": "{% if query.matched %}\n  Jo\n{% else %}\n  Nee, ass {{ state.state_with_unit }}\n{% endif %}\n",
        "any": "{% if query.matched %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    Jo, {{ match[:3] | join(\", \") }} an {{ (match | length - 3) }} méi\n  {%- else -%}\n    Jo,\n    {% for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} an {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% else %}\n  Nee\n{% endif %}\n",
        "all": "{% if not query.unmatched: %}\n  Jo\n{% else %}\n  {% set no_match = query.unmatched | map(attribute=\"name\") | sort | list %}\n  {% if no_match | length > 4 %}\n    Nee, {{ no_match[:3] | join(\", \") }} an {{ (no_match | length - 3) }} méi si net\n  {%- else -%}\n    Nee,\n    {% for name in no_match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} an {% endif -%}\n      {{ name }}\n    {%- endfor %} net\n  {% endif %}\n{% endif %}\n",
        "which": "{% if not query.matched %}\n  Kee vu\n{% else: %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    {{ match[:3] | join(\", \") }} an {{ (match | length - 3) }} méi\n  {% else %}\n    {%- for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} an {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% endif %}\n",
        "how_many": "{{ query.matched | length }}\n"
      },
      "HassTurnOff": {
        "default": "{{ slots.name }} ass aus",
        "lights_area": "D'Luuten am {{ slots.area }} sinn aus",
        "fans_area": "D'Ventilatioun am {{ slots.area }} ass aus",
        "cover": "{{ slots.name }} ass erof",
        "cover_area": "{{ slots.area }} ass erof",
        "cover_device_class": "{{ slots.device_class }} ass erof"
      },
      "HassTurnOn": {
        "default": "{{ slots.name }} ass un",
        "lights_area": "D'Luuten am {{ slots.area }} sinn un",
        "fans_area": "D'Ventilatioun am {{ slots.area }} ass un",
        "cover": "{{ slots.name }} ass erop",
        "cover_area": "{{ slots.area }} ass erop",
        "cover_device_class": "{{ slots.device_class }} ass erop"
      }
    }
  },
  "lists": {
    "color": {
      "values": [
        {
          "in": "wäiss",
          "out": "white"
        },
        {
          "in": "schwaarz",
          "out": "black"
        },
        {
          "in": "rout",
          "out": "red"
        },
        {
          "in": "orange",
          "out": "orange"
        },
        {
          "in": "giel",
          "out": "yellow"
        },
        {
          "in": "gréng",
          "out": "green"
        },
        {
          "in": "blo",
          "out": "blue"
        },
        {
          "in": "violett",
          "out": "purple"
        },
        {
          "in": "mof",
          "out": "purple"
        },
        {
          "in": "brong",
          "out": "brown"
        }
      ]
    },
    "temperature": {
      "range": {
        "type": "temperature",
        "from": 0,
        "to": 100
      }
    },
    "temperature_unit": {
      "values": [
        {
          "in": "(c|celsius)",
          "out": "Celsius"
        },
        {
          "in": "(f|fahrenheit)",
          "out": "Fahrenheit"
        }
      ]
    },
    "brightness": {
      "range": {
        "type": "percentage",
        "from": 0,
        "to": 100
      }
    },
    "on_off_states": {
      "values": [
        {
          "in": "un",
          "out": "on"
        },
        {
          "in": "aus",
          "out": "off"
        }
      ]
    },
    "on_off_domains": {
      "values": [
        {
          "in": "<light>",
          "out": "light"
        },
        {
          "in": "<ventilator>",
          "out": "fan"
        },
        {
          "in": "<switch>",
          "out": "switch"
        }
      ]
    },
    "cover_states": {
      "values": [
        {
          "in": "(op | erop)",
          "out": "open"
        },
        {
          "in": "(zou | erof)",
          "out": "closed"
        },
        {
          "in": "(geet | ginn | fiert | fueren (op|erop))",
          "out": "opening"
        },
        {
          "in": "(geet | ginn | fiert | fueren (zou|erof))",
          "out": "closing"
        }
      ]
    },
    "cover_classes": {
      "values": [
        {
          "in": "<awning>",
          "out": "awning"
        },
        {
          "in": "<blind>",
          "out": "blind"
        },
        {
          "in": "<curtain>",
          "out": "curtain"
        },
        {
          "in": "<door>",
          "out": "door"
        },
        {
          "in": "<garage>",
          "out": "garage"
        },
        {
          "in": "<gate>",
          "out": "gate"
        },
        {
          "in": "<shade>",
          "out": "shade"
        },
        {
          "in": "<shutter>",
          "out": "shutter"
        },
        {
          "in": "<window>",
          "out": "window"
        }
      ]
    }
  },
  "expansion_rules": {
    "name": "([den | de | d']){name}",
    "area": "[([an (der | dem)] | de | am | d')]{area}",
    "window": "([d']Fënster[en] | [d']Rollued[en] | [d']Jalousi[(e|ë|en)] | [d']Kuppel[en])",
    "awning": "([d']Kuppel[en] | [d']Daachkuppel[en])",
    "blind": "[d']Rollued[en]",
    "curtain": "[(de|d')] Rideau[(e|en)]",
    "door": "[d']Dier[(en|e)]",
    "garage": "([d']Garage | [d']Garagëpaart)",
    "gate": "[d']Paart[en]",
    "shade": "[d']Markis[(e|en)]",
    "shutter": "[d']Jalousi[(e|ë|en)]",
    "all_window": "(all[eguer] [d']Fënsteren | all[eguer] [d']Rollueden | all[eguer] [d']Jalousien | all[eguer] [d']Kuppelen)",
    "ventilator": "([de |d']Ventilator[(ë|en)] | [d']Belëftung[(e|en)])",
    "temp": "[d']Temperatur",
    "maach": "(maach | fuer | schalt | setz | änner | knips)",
    "zou": "(zou | erof)",
    "op": "(op | erop)",
    "temperature": "{temperature} [Grad] [{temperature_unit}]",
    "brightness": "{brightness}[%| Prozent]",
    "light": "([d']Luut[en] | [d']Luucht[en] | [d']Beliichtung)",
    "switch": "([d']Schalteren | [d']Steckdous[en] | [de] Schalter)"
  },
  "skip_words": [
    "wannechgelift",
    "merci"
  ]
}